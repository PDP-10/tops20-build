  This document describes the changes made to BOOT since TOPS-20 V5,
  including all changes made for TOPS-20 V6 and V6.1.



  BOOT.DOC -- Changes to BOOT [version 10(201)]
  September 1984


  COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1976, 1984.
  ALL RIGHTS RESERVED.
  
  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY  BE  USED  AND
  COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE AND WITH
  THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE  OR
  ANY  OTHER  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE
  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE
  SOFTWARE IS HEREBY TRANSFERRED.
  
  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT  TO  CHANGE  WITHOUT
  NOTICE  AND  SHOULD  NOT  BE CONSTRUED AS A COMMITMENT BY DIGITAL
  EQUIPMENT CORPORATION.
  
  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF
  ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.

Changes to BOOT [version 10(201)]                     Page 2


1.0  NEW FUNCTIONALITY

The following new functions have been added to BOOT:

     1.  Subdirectory handling.   BOOT  will  now  load/dump
         from/to a subdirectory.

     2.  Dual-port  unlocking.    Previously,   BOOT   would
         unconditionally  grab a dual-ported RP04567 and not
         release it until the load or  dump  was  completed.
         Now,  it  is more polite, locking and unlocking the
         port for each  IO  transaction.   This  allows  the
         other  system to access the device when the port is
         unlocked.  In particular, one can now  interrupt  a
         load  or  dump  in  progress with ^\ and get to the
         RSX20F parser.   A  single  ^\  is  sufficient  (it
         requires  about  2-4  seconds to receive the parser
         prompt).

     3.  Single-pass loading.   BOOT  will  perform  only  a
         single  pass  to  load release 6 monitors.  It will
         still  perform  a  2-pass  load  on  pre-release  6
         monitors.

     4.  Long-file handling.  BOOT can now  load  a  monitor
         containing more than 512 pages.


  [End BOOT.DOC]




COPYRIGHT (C) 1976,1978,1979,1980,1981,1982,1983,1984,1985 BY
DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
 
 
THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
TRANSFERRED.
 
THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
CORPORATION.
 
DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
Changes to BOOT [version 11(306)]                     Page 2


1.0  INTERNAL CHANGES TO BOOT V11

     This new version of BOOT contains no new functionality.
The changes that have been made are in the area of disk I/O.
The I/O code has been rewritten to allow BOOT to write  more
than one page per I/O request, and to allow simultaneous I/O
acrosss different channels when BOOT writes to a  multi-pack
structure.

     The  routine  that  writes  the  dump  file  has   been
rewritten  to take advantage of the changes in the I/O code.
This routine scans the dump file's index  block  and  writes
out  as  many  pages  as it finds that are contiguous on the
disk in one call to the disk I/O code.  These  changes  have
realized a considerable decrease in BOOT's dumping time.



2.0  EXTERNAL CHANGES TO BOOT V11

     After BOOT has successfully written the dump  file,  it
prints  out two pieces of information.  It prints the number
of pages written to  the  file  (not  including  the  file's
directory  page).   It  also  prints  out  the number of I/O
requests needed to write the file.  The more contiguous  the
DUMP.EXE  file  is,  the  lower  this  number  will  be (and
therefore the faster the DUMP.EXE file will be written).  In
order  to make the file as contiguous as possible, a refresh
of the structure can be done, where the DUMP.EXE file is the
first  file  created after all of the files on the structure
have been deleted and expunged.

     Another observable change is that the DUMP.CPY file  is
now about 20 to 30 pages larger than it used to be.  This is
the file created by SETSPD when it copies the DUMP.EXE file.
The  old BOOT used to compress the DUMP.EXE file as it wrote
it.   The  new  BOOT  writes  each  physical  page  to  it's
corresponding  virtual  page  in the file (plus one to allow
for the directory page).   Although  the  DUMP.CPY  file  is
larger,  FILDDT  will  NOT  map any pages from the file that
were not in  memory  at  the  time  the  DUMP.EXE  file  was
written.



3.0  RESTRICTIONS

     This BOOT will NOT load any 6.0 monitors.  In  general,
it will not load any monitor that has been built with symbol
A%POST (in POSTLD) greater than 745000.  It  will  load  the
distributed (and autopatch) 5.1 and 6.1 monitors





Changes in BOOT version 11(311)

The behavior of BOOT with respect to errors during the dump phase of
an  autoreload  has  been restored to the behavior during TOPS20 V5:
errors during the dump will not abort the autoreload (and cause BOOT
to return to prompt level).  This is now the default action for 6.1.

However, some sites may be very anxious to capture a particular dump
and  would  want  an  error  during  the  dump  phase  to  abort the
autoreload (and  provide  a  possible  opportunity  to  correct  the
problem  and  try  the  dump  again).  BOOT now reads flags from the
homeblock of the bootable structure, and said flags will control its
behavior  relative to errors encountered during the dump-phase of an
autoreload.

CHECKD now modifies and displays these flags (parameters):

    ENABLE BOOT-PARAMETERS (for structure) PS: (parameter)
      READ BOOT-PARAMETERS   !Instructs BOOT to read the parameter word 
      HALT-ON-DUMP-ERRORS      !Instructs BOOT to halt the autoreload on a
                               !dump-error and return to prompt level

    DISABLE BOOT-PARAMETERS .....

Note that if READ-PARAMETERS is disabled (the default  condition  on
any  structure),  BOOT  will  not  read  the parameter word.  If the
parameters are enabled, the heading of  BOOT  messages  will  change
from  "[BOOT:" to "[*BOOT:  ", with the asterisk indicating that the
parameter word was read.

The following CHECKD command will display the state of the parameter
word:

    SHOW BOOT-PARAMETERS (for structure) PS:
