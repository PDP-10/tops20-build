!	COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION 1986.
!	ALL RIGHTS RESERVED.
!
!	THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY  BE  USED  AND
!	COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE AND WITH
!	THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE  OR
!	ANY  OTHER  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE
!	AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE
!	SOFTWARE IS HEREBY TRANSFERRED.
!
!	THE INFORMATION IN THIS SOFTWARE IS  SUBJECT  TO  CHANGE  WITHOUT
!	NOTICE  AND  SHOULD  NOT  BE CONSTRUED AS A COMMITMENT BY DIGITAL
!	EQUIPMENT CORPORATION.
!
!	DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF
!	ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
!
! DIUPATDEB.REQ

!++
! FACILITY:	PAT Parser
!
! ABSTRACT:
!
!	PATDEB.REQ is the specification for the parser debugger.
!
!	This module is language independent.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR:  C. Mitchell, CREATION DATE:  25-Feb-80
!
! MODIFIED BY:
!
! 	, : VERSION
! 001	- C. Richardson 25-May-84 Remove VMS dependencies.
!
!  253  Rename file to DIUPATDEB.
!       Gregory A. Scott 1-Jul-86
!--

!
! INCLUDE FILES:
!

require 'DIUPATREQPRO';				! 001

%if patblsext_debugging
%then

%IF %BLISS (BLISS36)						! 002
%THEN								! 002
macro								! 002
PAT$DEB				=	PATDEB %;		! 002
%FI								! 002

external routine
    PAT$DEB : novalue;

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAT$DEB is the command processor for the PAT parser debugger.
!	This debugger can be invoked by calling PAT$DEB from DEBUG-32.
!	Type HELP for info on supported commands.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

%IF %BLISS (BLISS36)						! 002
%THEN								! 002
macro								! 002
PAT$DEB_TOKEN				= DEBTOK %;		! 002
%FI								! 002

external routine
    PAT$DEB_TOKEN : novalue;

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAT$DEB_TOKEN is called when the parser gets a new token
!	and handles tracing and breakpointing for tokens and line
!	numbers.  This routine is only called by the parser.
!
! FORMAL PARAMETERS:
!
!	ACTUAL_PARSE	TRUE if actual parse; FALSE if parse-ahead
!			during error recovery.
!
! IMPLICIT INPUTS:
!
!	The current token from PARLEX.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
%IF %BLISS (BLISS36)						! 002
%THEN								! 002
macro								! 002
PAT$DEB_STATE				=	DEBSTA %;	! 002
%FI								! 002

external routine
    PAT$DEB_STATE : novalue;

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAT$DEB_STATE is called when the parser begins processing
!	a new state and handles tracing and breakpointing for
!	state numbers.  This routine is only called by the parser.
!
! FORMAL PARAMETERS:
!
!	CURRENT_STATE	- Current state table index
!
!	ACTUAL_PARSE	TRUE if actual parse; FALSE if parse-ahead
!			during error recovery.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

%IF %BLISS (BLISS36)						! 002
%THEN								! 002
macro								! 002
PAT$DEB_REDUCE			=	DEBRED %;		! 002
%FI								! 002

external routine
    PAT$DEB_REDUCE : novalue;

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAT$DEB_REDUCE is called when the parser does a reduction
!	and handles tracing and breakpointing on reductions.
!	This routine is only called by the parser.
!
! FORMAL PARAMETERS:
!
!	TOKEN		- Non-terminal on left hand side of production
!
!	ACTION_NUM	- Semantics action
!
!	ACTUAL_PARSE	TRUE if actual parse; FALSE if parse-ahead
!			during error recovery.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

%fi

! End of PATDEB.REQ
