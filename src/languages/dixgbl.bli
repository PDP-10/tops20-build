%TITLE 'DIX global definitions'

MODULE dixgbl

!  COPYRIGHT (C) DIGITAL EQUIPMENT CORPORATION 1983, 1986.
!  ALL RIGHTS RESERVED.
!  
!  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY  BE  USED  AND
!  COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE AND WITH
!  THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE  OR
!  ANY  OTHER  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE
!  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE
!  SOFTWARE IS HEREBY TRANSFERRED.
!  
!  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT  TO  CHANGE  WITHOUT
!  NOTICE  AND  SHOULD  NOT  BE CONSTRUED AS A COMMITMENT BY DIGITAL
!  EQUIPMENT CORPORATION.
!  
!  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF
!  ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.

!++
! .chapter >DIXGBL
!
!   The module DIXGBL defines some global literals useful to user programs
! but not used by the actual DIX code.  DIX could have been written to use them
! on the VAX, but not on TOPS-20 without assigning short names for each of
! them.  That seemed like a waste of time.
!
!   FACILITY: Data Conversion Routines (DIX)
!
!   ABSTRACT:
!
!   ENVIRONMENT:
!
!   AUTHOR: David Dyer-Bennet, Creation Date: 21-Jul-82
!--

    (IDENT = '2.1(53)'                  ! \.p;\
                                        ! **EDIT**
    %REQUIRE ('DIXSWI.REQ')             ! [%O'34'] 
) =
BEGIN

!++
! .hl 1 Require files
!--

REQUIRE 'DIXREQ';			! \

%sbttl 'Edit History'                   ! [7] Add this entire subsection

!++
! .hl 1 Edit History
!--

LIBRARY 'VERSION';

! ; .autotable

!++ COPY 

new_version (1, 0)

edit (7, '23-Aug-82', 'David Dyer-Bennet')
 %( Change version and revision standards everywhere.
    Files: All. )%

Edit (%O'30', '19-Jan-83', 'David Dyer-Bennet')
 %(  Update copyright notices, add mark at end of edit histories.
 )%

Edit (%O'34', '19-May-83', 'David Dyer-Bennet')
 %( Add DIXSWI require file to headings of all modules.  DIXSWI
    contains the BLISS32 addressing-mode declarations and the TOPS-10
    OTS declaration to avoid invoking the losing default of .REQUESTING
    the OTS library from whatever directory the compiler was called from
    when the build ran.
 )%

Edit (%O'35', '7-June-83', 'Charlotte L. Richardson')
 %( Declare version 1 complete.  All modules.
 )%

new_version (1, 1)

new_version (2, 0)

Edit (%O'36', '11-Apr-84', 'Sandy Clemens')
%( Put all Version 2 DIX development files under edit control.  Some of
   the files listed below have major code edits, or are new modules.  Others
   have relatively minor changes, such as cleaning up a comment.
   FILES: COMDIX.VAX-COM, COMPDX.CTL, DIXCST.BLI, DIXDEB.BLI,
   DIXDN.BLI (NEW), DIXFBN.BLI, DIXFP.BLI, DIXGBL.BLI, DIXGEN.BLI,
   DIXHST.BLI, DIXINT.PR1, DIXINT.PR2, DIXLIB.BLI, DIXPD.BLI (NEW),
   DIXREQ.REQ, DIXSTR.BLI, DIXUTL.BLI, DXCM10.10-CTL, MAKDIXMSG.BLI,
   STAR36.BLI, VERSION.REQ.
)%

Edit (%O'50', '8-Oct-84', 'Sandy Clemens')
  %( Add new format of COPYRIGHT notice.  FILES:  ALL )%

new_version (2, 1)

Edit (%O'53', '3-Jul-86', 'Sandy Clemens')
  %( Add remaining sources to V2.1 area.  Update copyright notices. )%

! **EDIT**
!-- .autoparagraph

mark_versions ('DIX')

!++
! .hl 1 OWN storage
!--

! [7] Remove version number word

! [5] Remove definitions of global literals for condition values.
! [5] These are now defined in DIXMSG, a file built by MAKDIXMSG.
! [5] This insures that the VMS system knows the message codes and
! [5] message text the same way that we do.

!++
! .hl 1 Data type names
!   Declare global literals for data type names of the form dix$k_dt_foo.
! This is useful only on the VAX, where higher level languages can get
! at such definitions.
!--

MACRO
    dix_type (class_code, type_code) =
	((class_code AND (1^class_code_bits - 1))^type_code_bits OR
	    (type_code AND (1^type_code_bits - 1))) %,
    decl_generic_item (class_code, type_name, short_name, type_code) =
	GLOBAL LITERAL %NAME ('DIX$K_DT_', type_name) = dix_type (class_code, type_code); %,
    decl_string_item(class_code, type_name, short_name, type_code) = 
	decl_generic_item (class_code, type_name, short_name, type_code) %,
    decl_fbin_item (class_code, type_name, short_name, type_code) = 
	decl_generic_item (class_code, type_name, short_name, type_code) %,
    decl_fp_item (class_code, type_name, short_name, type_code) = 
	decl_generic_item (class_code, type_name, short_name, type_code) %,
    decl_dnum_item (class_code, type_name, short_name, type_code) =
        decl_generic_item (class_code, type_name, short_name, type_code) %,
    decl_pdec_item (class_code, type_name, short_name, type_code) =
        decl_generic_item (class_code, type_name, short_name, type_code) % ;

dt_class_string_def
dt_class_fbin_def
dt_class_fp_def
dt_class_dnum_def
dt_class_pdec_def

END					! End of module

ELUDOM
