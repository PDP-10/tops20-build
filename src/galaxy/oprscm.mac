	TITLE	OPRSCM - SEMI OPR command tables for ORION
	SUBTTL	Preliminaries

;	COPYRIGHT (c) DIGITAL EQUIPMENT CORPORATION 1988.
;	ALL RIGHTS RESERVED.
;
;	THIS SOFTWARE IS FURNISHED UNDER A  LICENSE AND MAY BE USED AND  COPIED
;	ONLY IN  ACCORDANCE  WITH  THE  TERMS OF  SUCH  LICENSE  AND  WITH  THE
;	INCLUSION OF THE ABOVE  COPYRIGHT NOTICE.  THIS  SOFTWARE OR ANY  OTHER
;	COPIES THEREOF MAY NOT BE PROVIDED  OR OTHERWISE MADE AVAILABLE TO  ANY
;	OTHER PERSON.  NO  TITLE TO  AND OWNERSHIP  OF THE  SOFTWARE IS  HEREBY
;	TRANSFERRED.
;
;	THE INFORMATION IN THIS  SOFTWARE IS SUBJECT  TO CHANGE WITHOUT  NOTICE
;	AND SHOULD  NOT  BE CONSTRUED  AS  A COMMITMENT  BY  DIGITAL  EQUIPMENT
;	CORPORATION.
;
;	DIGITAL ASSUMES NO  RESPONSIBILITY FOR  THE USE OR  RELIABILITY OF  ITS
;	SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.

	SALL
	SEARCH	GLXMAC
	SEARCH	ORNMAC
	SEARCH	NEBMAC
	SEARCH  MONSYM,MACSYM
	PROLOG(OPRSCM)

;Version numbers

	SCMMAN==:0			;Maintenance edit number
	SCMDEV==:3			;Development edit number
	VERSIN (SCM)			;Generate edit number

	.DIRECTIVE FLBLST

	Subttl	Table of Contents

;		     Table of Contents for OPRSCM
;
;				  Section		      Page
;
;
;    1. Revision History . . . . . . . . . . . . . . . . . . .   3
;    2. SEMI-OPR command tables  . . . . . . . . . . . . . . .   4
;    3. START command tables for SEMI-OPR  . . . . . . . . . .   5
;    4. CONTINUE command tables  . . . . . . . . . . . . . . .   6
;    5. STOP command tables  . . . . . . . . . . . . . . . . .   7
	SUBTTL	Revision History

COMMENT \
*****  Release 6.0 -- begin development edits  *****

1	6.1117		3-Dec-87
	Place the SEMI-OPR command tables in module OPRSCM

2	6.1225		8-Mar-88
	Update copyright notice.

3	6.1237		21-Apr-88
	Move part of the command table from OPRCMD to here. This is a
result of adding LAT printers as a valid printer type to the commands
ALIGN, BACKSPACE, FORWARDSPACE and SUPPRESS. These changes caused
OPRCMD symbol's table to overflow.

\ ;end of revision history

SUBTTL	SEMI-OPR command tables

	EXTERN	STOBTH,STOHGH,STOOHG
	INTERN	OPRSCM	;MAKE VECTOR ADDRESS AVAILABLE

OPRSCM:	EXP	2	;SIZE
	EXP	SEMICM	;POINTER TO THE INI FUNCTION
	EXP	CMSFDB	;TOP LEVEL DISPATCH FOR SEMI-OPR


SEMICM:: $INIT(CMSFDB)
CMSFDB:: $KEYDSP(CMSTAB,<$ACTION(CMDACT##),$ERROR(BADSCM)>)

CMSTAB:	$STAB
IFN SOPR,<
IFN SOPRI,<ORNDSP(ALIFDB##,ALIGN,ALI)
	ORNDSP(BKSFDB##,BACKSPACE,BKS)>
	ORNDSP(SOCFDB,CONTINUE,CNT)
	ORNDSP(EXTFDB##,EXIT,EXT)
IFN SOPRI,<ORNDSP(BKSFDB,FORWARDSPACE,FWS)>
	ORNDSP(HLPFDB##,HELP,HLP)
IFN SOTAP,<ORNDSP(IDNFDB##,IDENTIFY,IDN)>
	ORNDSP(PUSFDB,PUSH,PUS)				;[3]
	ORNDSP(SHWFDB,SHOW,SHW)				;[3]
	ORNDSP(SSDFDB,SHUTDOWN,SHD)
	ORNDSP(SSTFDB,START,STA)
	ORNDSP(SSPFDB,STOP,PAU)
IFN SOPRI,<ORNDSP(SUPFDB,SUPPRESS,SUP)>			;[3]
	ORNDSP(TAKOPR##,TAKE,TAK)
	ORNDSP(WAIOPR##,WAIT,WAI)>

	$ETAB

BADSCM:	MOVEI	S2,[ASCIZ/Invalid SEMI-OPR command specified/]
	$RETF				;BAD COMMAND

SUBTTL	START command tables for SEMI-OPR

SSTFDB:	$NOISE (SSTF01,<object>)

SSTF01:	$KEYDSP(SSTF02)

SSTF02:	$STAB
IFN SOCPH,<ORNDSP(SSTF04,<CARD-PUNCH>,CDP)>
IFN SOPTP,<ORNDSP(SSTF04,<PAPER-TAPE-PUNCH>,PTP)>
IFN SOPLO,<ORNDSP(SSTF04,<PLOTTER>,PLT)>
IFN SOPRI,<ORNDSP(SSTF11,PRINTER,LPT)>
IFN SOCRD,<ORNDSP(SSTF04,READER,RDR)>
	$ETAB

SSTF04:	$URANGE	(CONFRM)

SSTF11:	$URANGE(SSTF12)

SSTF12:	$SWITCH	(SSTF14,SSTF13,<$ALTERNATE(<CONFRM>)>)

SSTF13:	$STAB
	ORNSWI	(<DEVICE:>,DEV)
	$ETAB

SSTF14:	$DEV(CONFRM,<$HELP(<tape drive name>)>)
SUBTTL	CONTINUE command tables
SUBTTL	SHUTDOWN command tables

COMMENT	\
NOTE: SHOULD IT BECOME DESIRABLE FOR THE SHUTDOWN AND
CONTINUE COMMANDS TO BE NO LONGER SYNTACTICALLY IDENTICAL THEN THE
COMMON USE OF THIS PDB CHAIN DEFINITION IS NO LONGER VALID.
\

SSDFDB:	$NOISE	(SSD010,<scheduling for>)

SOCFDB:	$NOISE (SOCF01,<object>)

SOCF01:	$KEYDSP(SOCF02)

SOCF02:	$STAB
IFN SOCPH,<ORNDSP(SOCF04,<CARD-PUNCH>,CDP)>
IFN SOPTP,<ORNDSP(SOCF04,<PAPER-TAPE-PUNCH>,PTP)>
IFN SOPLO,<ORNDSP(SOCF04,<PLOTTER>,PLT)>
IFN SOPRI,<ORNDSP(SOCF04,PRINTER,LPT)>
IFN SOCRD,<ORNDSP(SOCF04,READER,RDR)>
	$ETAB

SOCF03:	$SRANGE(CONFRM)

SOCF04:	$URANGE(CONFRM)

SSD010:	$KEYDSP(SSD020)

SSD020:	$STAB
IFN SOCPH,<ORNDSP(SOCF04,<CARD-PUNCH>,CDP)>
IFN SOPTP,<ORNDSP(SOCF04,<PAPER-TAPE-PUNCH>,PTP)>
IFN SOPLO,<ORNDSP(SOCF04,<PLOTTER>,PLT)>
IFN SOPRI,<ORNDSP(SOCF04,PRINTER,LPT)>
IFN SOCRD,<ORNDSP(SOCF04,READER,RDR)>
	$ETAB

SUBTTL	STOP command tables

SSPFDB:	$NOISE (SSPF01,<object>)

SSPF01:	$KEYDSP(SSPF02)

SSPF02:	$STAB
IFN SOCPH,<ORNDSP(SSPU01,<CARD-PUNCH>,CDP)>
IFN SOPTP,<ORNDSP(SSPU01,<PAPER-TAPE-PUNCH>,PTP)>
IFN SOPLO,<ORNDSP(SSPU01,<PLOTTER>,PLT)>
IFN SOPRI,<ORNDSP(SSPU01,PRINTER,LPT)>
IFN SOCRD,<ORNDSP(SSPU01,READER,RDR)>
	$ETAB

SSPS01:	$NOISE	(SSPN01,<stream number>)

SSPU01:	$NOISE	(SSPN01,<unit number>)

SSPN01:	$NUMBER	(SSPN02,^D10,<number or range (n:m)>,<$ACTION(STOBTH##)>)
SSPN02:	$TOKEN	(SSPN03,<:>,<$HELP(<colon to specify a range>),$DEFAULT(IMMEDIATELY),>)
SSPN03:	$NUMBER	(SSP010,^D10,,<$ACTION(STOHGH##)>)

SSP010:	$KEYDSP	(SSP020,<$DEFAULT(<IMMEDIATELY>),$ALTERNATE(CONFRM)>)

SSP020:	$STAB
	ORNDSP(SSP030,<AFTER>,AFT)
	ORNDSP(CONFRM,<IMMEDIATELY>,IMM)
	$ETAB

SSP030:	$KEY(CONFRM,SSP040)

SSP040:	$STAB
	ORNKEY(<CURRENT-REQUEST>,ACR)
	ORNKEY(<EVERY-REQUEST>,AER)
	$ETAB

CONFRM: $CRLF

;**;The following code to the end of OPRSCM is a part of edit 3

	EXTERN	CHKVAL,DSTBRK,CHKNOD,DQSCHK,LPTMSK,DQSSHO        
	EXTERN	LATSAP,LATSHO,SHOMSK,CLUMSK,BLDCNT,CLNTAB,CHGBLK 
	EXTERN	MAXNOD,CLNNAM,CLNTAB,SBNNAMT,STOBTH,STOHGH       
	EXTERN	CHKPOS,FIXIT,LATSRV,STOOHG			 

	INTERN	MTNFDB,NXTFDB,PUSFDB,RPTFDB,REQFDB,RSPFDB,RTEFDB 
	INTERN	SETFDB,STAFDB,STPFDB,SUPFDB,SWIFDB,SNDFDB,SHWFDB 
	INTERN	UNDFDB 	 					 

SUBTTL	MOUNT command tables

MTNFDB:	$KEY	(MTN020,MTN010,<$DEFAULT(<STRUCTURE>)>)
MTN010:	$STAB
	ORNKEY	(<STRUCTURE>,STR)
	$ETAB
MTN020:	$DEV	(MTN030,<$HELP(<alias name>),$FLAGS(CM%PO)>)

CLUSTER<
MTN030:	$SWITCH	(MTN050,MTN040,<$ALTERNATE(<MTN060>)>)	
>
SINGLE<
MTN030:	$SWITCH	(MTN050,MTN040,<$ALTERNATE(<CONFRM>)>)	
>
MTN040:	$STAB
	ORNSWI(<STRUCTURE-ID:>,SID)
	$ETAB

CLUSTER<
MTN050:	$DEV	(MTN060,<$HELP(<structure name>),$FLAGS(CM%PO)>) 

MTN060:	$CLUNOD	(CONFRM)				

> 

SINGLE<
MTN050:	$DEV	(CONFRM,<$HELP(<structure name>),$FLAGS(CM%PO)>) 
> 

	SUBTTL	NEXT - NEXT COMMAND

NXTFDB:	$NOISE	(NXT010,<job on>)		

NXT010:	$KEYDSP(NXT020)				

NXT020:	$STAB					
	ORNDSP(NXT040,BATCH-STREAM,BAT)		
	ORNDSP(NXT030,CARD-PUNCH,CDP)		
	ORNDSP(NXT030,PAPER-TAPE-PUNCH,PTP)	
	ORNDSP(NXT030,PLOTTER,PLT)		
	ORNDSP(NXT025,PRINTER,LPT)		
	$ETAB					

NXT025:	$NOISE	(NXT045,<unit number or remote printer type>) 
NXT030:	$NOISE	(NXT050,<unit number>)		
NXT040:	$NOISE	(NXT050,<stream number>)	

NXT045:	$NUMBER	(NXT100,^D10,<number>,<$ACTION(STOBTH),$ALTERNATE(NXT091)>) 
NXT050:	$NUMBER	(NXT080,^D10,<number (/NODE:)>,<$ACTION(STOBTH),>) 
NXT080:	$SWITCH (NXT090,NXT085,<$DEFAULT(<REQUEST-ID>),$ALTER(NXT100)>) 
NXT085:	$STAB					
	ORNSWI(NODE:,NOD)			
	$ETAB					
NXT090:	$NODNM	(NXT100,<node name>,<$FLAGS(CM%PO!CM%NSF)>) 

;REMOTE PRINTERS

NXT091:	$KEYDSP(NXT092)				
NXT092:	$STAB					
CLUSTER<  ORNDSP (NXT093,CLUSTER,CLU)>		
	  ORNDSP (NXT094,DQS,DQS)		
	  ORNDSP (NXT095,LAT,LAT)		
	$ETAB					

CLUSTER<
NXT093:	$CLUSPL(NXT100)				
> 
NXT094:	$DQSSPL(NXT100)				
NXT095:	$LATSPL(NXT100)				

NXT100:	$KEYDSP	(NXT110,<$DEFAULT(<REQUEST-ID>)>) 

NXT110:	$STAB					
	ORNDSP(NXT120,<REQUEST-ID>,RQN)		
	$ETAB					

NXT120:	$NUMBER(CONFRM,^D10,<request number of the next job to schedule>,<$ACTION(CHKPOS)>) 

SUBTTL	PUSH command tables

PUSFDB: $NOISE(PUS100,<to EXEC level>)

PUS100:	$CRLF(<$ACTION(PUSHRT##)>)

SUBTTL	REPORT command tables

RPTFDB:	$NOISE	(RPT005,<by>)

RPT005:	$FIELD (RPT015,<user name>)

RPT015:	$DEV	(RPT020,<$HELP(<device being reported>),$FLAGS(CM%PO)>)

RPT020:	$CRLF	(<$ALTER(RPT025),$ACTION(TXTLIN##),$HELP(<confirm for multiple line response>)>)


RPT025:	$CTEXT	(CONFRM,<single line response>)

SUBTTL	REQUEUE command tables

REQFDB:	$NOISE	(REQ010,<current job on>)

REQ010:	$KEYDSP	(REQ020)
REQ020:	$STAB
	ORNDSP	(REQ030,<BATCH-STREAM>,BAT)
	ORNDSP	(REQ040,<CARD-PUNCH>,CDP)
IFN FTFTS,<
	ORNDSP	(REQ030,<FTS-STREAM>,FTS)
> ;End FTFTS conditional
	ORNDSP	(REQ040,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP	(REQ040,<PLOTTER>,PLT)
	ORNDSP	(REQ041,<PRINTER>,LPT)
	$ETAB


; Batch tables
;
REQ030:	$STREAM	(REQ100)


; Output device tables
;
REQ040:	$UNIT	(REQ050)
REQ041:	$NOISE	(REQ042,<unit number or remote printer type>)
REQ042:	$NUMBER	(REQ050,^D10,<unit number>,<$ACTION(CHKVAL),$ALTERNATIVE(REQ044)>)

REQ044:	$KEYDSP	(REQ045)
REQ045:	$STAB
CLUSTER<  ORNDSP (REQ046,CLUSTER,CLU)> 
	  ORNDSP (REQ047,DQS,DQS)
	  ORNDSP (REQ048,LAT,LAT)
	$ETAB
CLUSTER<
REQ046:	$CLUSPL (REQ050)
> 
REQ047:	$DQSSPL	(REQ050)
REQ048:	$LATSPL	(REQ050)


REQ050:	$KEYDSP	(REQ060,<$DEFAULT(CURRENT-POSITION),$ALTER(REQ100)>)
REQ060:	$STAB
	ORNDSP	(REQ070,<BEGINNING-OF>,BEG)
	ORNDSP	(REQ100,<CURRENT-POSITION>,CUR)
	$ETAB
REQ070:	$KEY	(REQ100,REQ080)
REQ080:	$STAB
	ORNKEY	(<COPY>,CPY)
	ORNKEY	(<FILE>,FIL)
	ORNKEY	(<JOB>,JOB)
	$ETAB

REQ100:	$EXPL	(CONFRM,<$ALTER(CONFRM)>)

SUBTTL	RESPOND command tables

RSPFDB:	$NOISE	(RSP001,<to message number>)

RSP001:	$NUMBER	(RSP005,^D10,<message number>,$ACTION(CHKVAL))

RSP005:	$CRLF	(<$ALTER(RSP010),$ACTION(TXTLIN##),$HELP(<confirm for multiple line response>)>)

RSP010:	$CTEXT	(CONFRM,<single line response>)

SUBTTL	ROUTE command tables

RTEFDB:	$NOISE	(RTEF05,device)

RTEF05:	$KEYDSP(RTEF10)

RTEF10:	$STAB
	ORNDSP(RTEF50,<ALL-DEVICES>,ALL)
	ORNDSP(RTEF15,<CARD-PUNCH>,CDP)
	ORNDSP(RTEF15,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP(RTEF15,<PLOTTER>,PLT)
	ORNDSP(RTEF14,<PRINTER>,LPT)		
	$ETAB

RTEF14:	$NOISE	(RTEF19,<unit number or remote printer type>) 
RTEF15:	$NOISE	(RTEF20,<unit number>)
RTEF19:	$NUMBER	(RTEF41,^D10,<source device unit number>,$ALTERN(RTEF24)) 
RTEF20:	$NUMBER	(RTEF35,^D10,<source device unit number>,$ALTERN(RTEF25))
RTEF24:	$KEYDSP	(RTES05,<$ALTERNATE(RTES10)>)			
RTEF25:	$KEYDSP	(RTEF30)
RTEF30:	$STAB
	ORNDSP	(RTEF35,<ALL-UNITS>,ALL)
	$ETAB

RTES05:	$STAB					
	ORNDSP	(RTEF34,<ALL-UNITS>,ALL)	
	$ETAB					

;REMOTE PRINTERS.

RTES10:	$KEYDSP	(RTES11)
RTES11:	$STAB
CLUSTER<  ORNDSP (RTES12,CLUSTER,CLU)> 
	  ORNDSP (RTES13,DQS,DQS)
	  ORNDSP (RTES14,LAT,LAT)
	$ETAB
CLUSTER<
RTES12:	$CLUSPL (RTEF41)
>
RTES13:	$DQSSPL	(RTEF41)
RTES14:	$LATSPL	(RTEF41)

;To explain the following magical line...
;The default '(' is to allow an ESC to go to the next field and display noise.
;The ERRPDB is used to only get to the next field on switch error or ESC.
;The alternate is to permit entering the destination or crlf

RTEF34:	$SWITCH	(RTEF38,RTEF36,<$DEFAULT(<(>),$ERRPDB(RTEF40),$ALTER(RTEF44)>) 
RTEF35:	$SWITCH	(RTEF39,RTEF36,<$DEFAULT(<(>),$ERRPDB(RTEF40),$ALTER(RTEF45)>)
RTEF36:	$STAB
	ORNSWI(NODE:,NOD)
	$ETAB
RTEF38:	$NODNM	(RTEF41,<node name>,<$FLAGS(CM%PO!CM%NSF)>)
RTEF39:	$NODNM	(RTEF40,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

RTEF40:	$NOISE	(RTEF45,<to unit number>)
RTEF41:	$NOISE	(RTEF44,<to unit number or remote printer type>)
RTEF44:	$NUMBER	(CONFRM,^D10,<destination unit number>,<$ALTERNATE(RTES15)>) 
RTEF45:	$NUMBER	(RTEF48,^D10,<destination unit number>,<$ALTERNATE(RTEF46)>)
RTES15:	$KEYDSP	(RTEF47,<$ALTERNATE(RTES16)>)
RTEF46:	$KEYDSP	(RTEF47,<$ALTERNATE(RTEF80)>)
RTEF47:	$STAB
	ORNDSP	(RTEF48,<ALL-UNITS>,ALL)
	$ETAB
RTEF48:	$NODE	(CONFRM)

;REMOTE PRINTERS.

RTES16:	$KEYDSP	(RTES17,<$ALTERNATIVE(RTEF80)>)
RTES17:	$STAB
CLUSTER<  ORNDSP (RTES18,CLUSTER,CLU)>
	  ORNDSP (RTES19,DQS,DQS)
	  ORNDSP (RTES20,LAT,LAT)
	$ETAB
CLUSTER<
RTES18:	$CLUSPL (CONFRM)
>
RTES19:	$DQSSPL	(CONFRM)
RTES20:	$LATSPL	(CONFRM)

;For parsing all devices

RTEF50:	$NOISE	(RTEF55,<on node>)
RTEF55:	$KEYDSP	(RTEF60,<$HELP(<ALL-NODES>),$ALTERNATE(RTEF65)>)
RTEF60:	$STAB
	ORNDSP	(RTEF70,<ALL-NODES>,ALL)
	$ETAB

RTEF65:	$NODNM	(RTEF70,<source node name>,<$FLAGS(CM%PO!CM%NSF)>)

RTEF70:	$NOISE	(RTEF75,<to node>)
RTEF75:	$NODNM	(CONFRM,,<$ALTERNATE(RTEF80),$FLAGS(CM%PO!CM%NSF)>)

RTEF80:	$CRLF	($HELP(<confirm to delete routing>))

SUBTTL	SEND command tables

SNDFDB:	$NOISE	(SND001,<to>)

SND001:	$KEYDSP	(SND005)

SND005:	$STAB
	ORNDSP(SND040,<ALL>,ALL)
	ORNDSP(SND015,<BATCH-STREAM>,BAT)
	ORNDSP(SND010,<JOB>,JOB)
	ORNDSP(SND025,<OPERATOR>,OPR)
	ORNDSP(SND020,<TERMINAL>,TRM)
	$ETAB

SND010:	$NUMBER(SND030,^D10,<job number>,$ACTION(CHKVAL))
SND015:	$STNUM(SND025)
SND020:	$NUMBER(SND030,^D8,<terminal number>,$ACTION(CHKVAL))
SND025:	$NODE(SND030)

SND030:	$CRLF	(<$ALTER(SND035),$ACTION(TXTLIN##),$HELP(<confirm for multiple line response>)>)

SND035:	$CTEXT	(CONFRM,<single line response>)

CLUSTER<
SND040:	$CLUNOD	(SND035,SND035)		
> 

SINGLE<
SND040:	$NODE(SND035)			
> 

SUBTTL	SET command tables

SETFDB:	$KEYDSP(SET010)

SET010:	$STAB
	ORNDSP(SET170,BATCH-STREAM,BAT)
	ORNDSP(SET490,<CARD-PUNCH>,CDP)
	ORNDSP(SET700,<DISK-DRIVE>,DSK)
	ORNDSP(SET070,JOB,JOB)
IFN	FTDN60,<
	ORNDSP(SETNOD,<NODE>,NOD)
>;END FTDN60
	ORNDSP(SET800,<ONLINE>,ONL)
	ORNDSP(SET430,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP(SET370,PLOTTER,PLT)
	ORNDSP(SETP00,PORT,POR)
	ORNDSP(SET200,PRINTER,LPT)
	ORNDSP(SETSCH,<SCHEDULER>,SCH)
	ORNDSP(SET600,<STRUCTURE>,STR)
	ORNDSP(SET630,<TAPE-DRIVE>,TAP)
	ORNDSP(SET020,TERMINAL,TRM,CM%INV)
	$ETAB

SET020:	$KEYDSP(SET030,<$ACTION(SETRTN##)>)

SET030:	$STAB
	ORNDSP(SET040,<TYPE>,TYP)
	$ETAB

SET040:	$NOISE (SET050,<to be>)
SET050:	$KEY(SET350,SET060,<$ACTION(SETRTN##)>)

SET060:	$STAB
DEFINE X(PARNAM,SIXNAM,SUF,EOLSEQ),<
	KEYTAB(.TT'SUF,<PARNAM>)
>;END DEFINE X
	TRMTYP				;Generate the options
	$ETAB

SET070:	$NOISE(SET080,<job number>)
SET080:	$NUMBER(SET090,^D10,<job number>,$ACTION(CHKVAL))

SET090:	$KEYDSP(SET100)

SET100:	$STAB
	ORNDSP(CONFRM,<NOOPR-INTERVENTION>,NOI)
	ORNDSP(CONFRM,<OPR-INTERVENTION>,OIA)
	ORNDSP(SET110,SCHEDULER-CLASS,CLS)
	$ETAB

SET110:	$NOISE(SET120,<to be>)
SET120:	$NUMBER(CONFRM,^D10,<scheduler class to put the job in>)

SET170:	$SRANGE(SET180)
SET180:	$KEYDSP(SET250)

SET200:	$NOISE	(SET201,<unit number or remote printer type>)
SET201:	$ORANGE	(SET210,<number or range (n:m)>,<$ALTERNATE(<SET203>)>) 

;REMOTE PRINTERS

SET203:	$KEYDSP	(SET204)
SET204:	$STAB
CLUSTER<  ORNDSP (SET205,CLUSTER,CLU)>		
	  ORNDSP (SET206,DQS,DQS)
	  ORNDSP (SET207,LAT,LAT)
	$ETAB
CLUSTER<
SET205:	$CLUSPL (SET209)		
> 
SET206:	$DQSSPL	(SET209)		
SET207:	$LATSPL	(SET208)		

SET208:	$KEYDSP(SET308)			;EXCLUDE DESTINATION
SET209:	$KEYDSP(SET305)			;EXCLUDE FORMS-TYPE, DESTINATION
SET210:	$KEYDSP(SET300)


SET250:	$STAB
	ORNDSP(SET295,ATTRIBUTE,ATR)
	ORNDSP(CONFRM,NOOPR-INTERVENTION,NOI)
	ORNDSP(CONFRM,OPR-INTERVENTION,OIA)
	ORNDSP(SET260,PRIORITY-LIMITS,PRL)
	ORNDSP(SET270,TIME-LIMITS,TIM)
	$ETAB

SET260:	$RANGE(CONFRM,<maximum priority limit or a range (1-63)>)
SET270:	$RANGE(CONFRM,<maximum time limits in minutes or a range>)
SET280:	$NUMBER(CONFRM,^D10,<line number>,$ACTION(CHKVAL))

;GET MEMORY LIMITS

SET295:	$KEYDSP(SET297)
SET297:	$STAB
	ORNDSP(CONFRM,BATCON,BAT)
	ORNDSP(CONFRM,SITGO,SIT)
	$ETAB

SET300:	$STAB
	ORNDSP(SET790,DESTINATION,DST)
	ORNDSP(SET330,FORMS-TYPE,FOT)
	ORNDSP(SET340,LIMIT-EXCEEDED-ACTION,LEA)
	ORNDSP(SET310,PAGE-LIMITS,PGL)
	ORNDSP(SET260,PRIORITY-LIMITS,PRL)
	$ETAB

SET305:	$STAB						
	ORNDSP(SET340,LIMIT-EXCEEDED-ACTION,LEA)	
	ORNDSP(SET310,PAGE-LIMITS,PGL)			
	ORNDSP(SET260,PRIORITY-LIMITS,PRL)		
	$ETAB

SET308:	$STAB						
	ORNDSP(SET330,FORMS-TYPE,FOT)			
	ORNDSP(SET340,LIMIT-EXCEEDED-ACTION,LEA)	
	ORNDSP(SET310,PAGE-LIMITS,PGL)			
	ORNDSP(SET260,PRIORITY-LIMITS,PRL)		
	$ETAB						

SET310:	$RANGE(CONFRM,<maximum number of pages or a range>)

SET320:	$STAB
	ORNKEY(ABORT,CNC)
	ORNKEY(ASK,ASK)
	ORNKEY(PROCEED,IGN)
	$ETAB

SET330:	$FIELD(CONFRM,<forms name>)
SET340:	$KEY(CONFRM,SET320)
SET350:	$CRLF(<$ACTION(SETTRM##)>)

SET370:	$URANGE	(SET380)

SET380:	$KEYDSP	(SET390)

SET390:	$STAB
	ORNDSP	(SET330,<FORMS-TYPE>,FOT)
	ORNDSP	(SET340,LIMIT-EXCEEDED-ACTION,LEA)
	ORNDSP	(SET480,<OUTPUT-LIMIT>,OPL)
	ORNDSP	(SET260,PRIORITY-LIMITS,PRL)
	$ETAB

SET430:	$URANGE	(SET440)

SET440:	$KEYDSP	(SET450)

SET450:	$STAB
	ORNDSP	(SET330,<FORMS-TYPE>,FOT)
	ORNDSP	(SET340,LIMIT-EXCEEDED-ACTION,LEA)
	ORNDSP	(SET470,<OUTPUT-LIMIT>,OPL)
	ORNDSP	(SET260,PRIORITY-LIMITS,PRL)
	$ETAB

SET470:	$RANGE(CONFRM,<maximum limit in feet or a range>)
SET480:	$RANGE(CONFRM,<maximum limit in minutes or a range>)
SET490:	$URANGE(SET500)

SET500:	$KEYDSP	(SET510)

SET510:	$STAB
	ORNDSP	(SET790,<DESTINATION>,DST)
	ORNDSP	(SET330,<FORMS-TYPE>,FOT)
	ORNDSP	(SET340,LIMIT-EXCEEDED-ACTION,LEA)
	ORNDSP	(SET530,<OUTPUT-LIMIT>,OPL)
	ORNDSP	(SET260,PRIORITY-LIMITS,PRL)
	$ETAB

SET530:	$RANGE(CONFRM,<maximum limit in cards or a range>)

SUBTTL	SET STRUCTURE command tables

SET600:	$DEV	(SET610,<$HELP(<structure name>),$FLAGS(CM%PO!CM%NSF)>)

SET610:	$KEYDSP(SET620)

SET620:	$STAB
	ORNDSP(SET622,<ACKNOWLEDGED>,ACK)
	ORNDSP(SET624,<AVAILABLE>,AVA)
	ORNDSP(CONFRM,<DOMESTIC>,DOM)
	ORNDSP(SET625,<DUMPABLE>,DUM)		
	ORNDSP(CONFRM,<EXCLUSIVE>,EXL)
	ORNDSP(CONFRM,<FOREIGN>,FOR)
	ORNDSP(SET622,<IGNORED>,IGN)
	ORNDSP(SET626,<NONDUMPABLE>,NDM)	
	ORNDSP(CONFRM,<REGULATED>,REG)
	ORNDSP(CONFRM,<SHARED>,SHR)
	ORNDSP(SET624,<UNAVAILABLE>,UAV)
	ORNDSP(CONFRM,<UNREGULATED>,URG)
	$ETAB

SET622:	$NOISE(CONFRM,<as a new mountable structure>)

SET624:	$NOISE(CONFRM,<to new users>)

SET625:	$NOISE(CONFRM,<as a dumpable structure>)	

SET626:	$NOISE(CONFRM,<as a nondumpable structure>)	

SUBTTL	SET TAPE command tables

SET630:	$DEV(SET640,<$HELP(<tape drive name>)>)

SET640:	$KEYDSP(SET650,<$ACTION(SET655)>)

SET650:	$STAB
	ORNDSP(SET660,<AVAILABLE>,AVA)
	ORNDSP(SETINI,<INITIALIZE>,INI)
	ORNDSP(SET670,<UNAVAILABLE>,UAV)
	$ETAB

	$DATA	VOLIDF,1		;Volume id flag (used for INITIALIZE)
					;if 0 then switch not used
					;if -1 then switch used
					;if 1 then switch needed (ANSI labels)

SET655:	SETZM	VOLIDF			;Initialize volid flag
	$RETT

SET660:	$NOISE(CONFRM,<for use by system>)

SET670:	$CRLF	(<$ALTER(SET680),$ACTION(TXTLIN##),$HELP(<confirm for multiple line explanation for drive unavailable>)>)

SET680:	$CTEXT	(CONFRM,<single line response>)

SUBTTL	SET DISK command tables

SET700:	$NOISE(SET705,<on>)

SET705:	$KEY(SET720,SET710,<$DEFAULT(<CHANNEL>)>)

SET710:	$STAB
	ORNKEY(<CHANNEL>,CHN)
	$ETAB

SET720:	$NUMBER(SET722,^D10,<channel number>,<$ACTION(CHKCHN)>)

SET722:	$KEYDSP(SET724,<$DEFAULT(<DRIVE>)>)

SET724:	$STAB
	ORNDSP(SET726,<CONTROLLER>,CON)
	ORNDSP(SET750,<DRIVE>,DRV)
	$ETAB

SET726:	$NUMBER(SET730,^D10,<controller number or -1 if none>)

SET730:	$KEY(SET750,SET740,<$DEFAULT(<DRIVE>)>)

SET740:	$STAB
	ORNKEY(<DRIVE>,DRV)
	$ETAB

SET750:$NUMBER(SET760,^D10,<drive number>,<$ACTION(CHKVAL)>)

SET760:	$KEYDSP(SET770)

SET770:	$STAB
	ORNDSP(SET660,<AVAILABLE>,AVA)
	ORNDSP(SET670,<UNAVAILABLE>,UAV)
	$ETAB

SET790:	$NOISE(SET792,<to be>)

SET792:	SNADST	(CONFRM)

SUBTTL	SET ONLINE command tables

SET800:	$NOISE(SET810,<device address>)

SET810:	$NUMBER(SET820,<^D8>,<channel number>,<$ACTION(CHKCHN)>)

SET820:	$COMMA(SET830)

SET830:	$NUMBER(SET840,<^D8>,<device unit number>,<$ACTION(CHKVAL)>)

SET840:	$COMMA(SET850,<$ALTERNATE(<CONFRM>)>)

SET850:	$NUMBER(SET860,<^D8>,<controller number or -1 if no controller number>,<$DEFAULT(<-1>)>)

SET860:	$NOISE(SET865,<alternate address>)

SET865:	$NUMBER(SET870,<^D8>,<alternate channel>,<$ACTION(CHKCHN),$ALTERNATE(CONFRM)>)

SET870:	$COMMA(SET875)

SET875:	$NUMBER(SET880,<^D8>,<alternate device unit number>,<$ACTION(CHKVAL)>)

SET880:	$COMMA(SET885,<$ALTERNATE(<CONFRM>)>)

SET885:	$NUMBER(CONFRM,<^D8>,<alternate controller number or -1>,<$DEFAULT(<-1>)>)

CHKCHN:	SKIPL	S1,CR.RES(S2)	;CHECK THAT NUMBER
	CAILE	S1,7		;IN BOUNDS
	SKIPA			;BAD NUMBER
	$RETT			;IT'S GOOD
	PUSHJ	P,FIXIT
	MOVEI	S2,[ASCIZ/channel number not in range 0:7/]
	$RETF

SUBTTL	SET TAPE INITIALIZE command tables

SETINI:	$SWITCH(,INI010,<$ACTION(SHRSWT),$ALTERNATE(INI250)>)

INI010:	$STAB
	ORNSDP(INI140,<COUNT:>,CNT)
	ORNSDP(INI020,<DENSITY:>,DEN)
	ORNSDP(INI240,<INCREMENT:>,INC)
	ORNSDP(INI040,<LABEL-TYPE:>,LBT)
	ORNSDP(INI060,<OVERRIDE-EXPIRATION:>,OVR)
	ORNSDP(INI080,<OWNER:>,OWN)
	ORNSDP(INI100,<PROTECTION:>,PRO)
	ORNSDP(INI120,<TAPE-DISPOSITION:>,TDP)
	ORNSDP(INI170,<VOLUME-ID:>,VID)
	$ETAB


INI020:	$KEY(NEXT(SETINI),INI030,<$DEFAULT(<1600>)>)

INI030:	$STAB
	ORNKEY(1600,160)
	ORNKEY(200,200)
	ORNKEY(556,556)
	ORNKEY(6250,625)
	ORNKEY(800,800)
	$ETAB

INI040:	$KEY(NEXT(SETINI),INI050,<$ACTION(INI057),$DEFAULT(<ANSI>)>)

INI050:	$STAB
	ORNKEY(ANSI,ANS)
	ORNKEY(EBCDIC,EBC)
	ORNKEY(TOPS-20,T20)
INI055:	ORNKEY(UNLABELED,UNL)
	$ETAB

INI057:	MOVE	S1,CR.RES(S2)		;Get the result from the key table
	CAIE	S1,INI055		;Was the label type unlabeled?
	SKIPE	VOLIDF			;No - skip if still need volume id
	$RETT				;No further action needed
	MOVEI	S1,1
	MOVEM	S1,VOLIDF		;Set that we need volid to be specified
	$RETT

INI060:	$KEY(NEXT(SETINI),INI070,<$DEFAULT(<NO>)>)

INI070:	$STAB
	ORNKEY(NO,NO)
	ORNKEY(YES,YES)
	$ETAB

INI080:	$USER(NEXT(SETINI),<$HELP(<user who owns the tape>)>)

INI100:	$NUMBER(NEXT(SETINI),^D8,<protection for the tape as an octal number>)
INI120:	$KEY(NEXT(SETINI),INI130,<$DEFAULT(<UNLOAD>)>)
INI130:	$STAB
	ORNKEY(HOLD,HLD)
	ORNKEY(UNLOAD,UNL)
	$ETAB

INI140:	$NUMBER(NEXT(SETINI),^D10,<number of volumes to be initialized>,<$ACTION(CHKPOS),$DEFAULT(<10>)>)

INI170:	$FIELD(NEXT(SETINI),<volume-id without quotes>,<$PREFILL(INI175)>)

INI175:	SETOM	VOLIDF				;Say we saw volume id
	$RETT

INI240:	$NUMBER(NEXT(INI200),^D10,<increment value for assigning next volume-id>,<$ACTION(CHKPOS),$DEFAULT(<1>)>)

INI250:	$CRLF ($ACTION(INI260))

INI260:	SKIPG	VOLIDF				;Is it not needed or not used?
	$RETT					;Yes
	MOVEI	S2,[ASCIZ/Volid must be specified/]
	$RETF

INI300:	$CRLF	(<$HELP(<confirm to abort tape initialization>)>)
SUBTTL	SET NODE command tables

IFN	FTDN60,<

SETNOD:	$NODNM(SETN10,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

SETN10:	$KEYDSP(SETN12,<$ALTERNATE(SETN20)>)

SETN12:	$STAB
	ORNDSP(SETN95,<BYTES-PER-MESSAGE>,BPM)
	ORNDSP(SETN40,<CLEAR-SEND-DELAY>,CSD)
	ORNDSP(SETN60,<RECORDS-PER-MESSAGE>,RPM)
	ORNDSP(SETN80,<TIMEOUT-CATEGORY>,TOU)
	ORNDSP(SETN90,<TRANSPARENCY>,TRA)
	$ETAB

SETN20:	$KEYDSP(SETN22)

SETN22:	$STAB
	ORNDSP(SETN31,<APPLICATION>,PLU)
	ORNDSP(SETN35,<CHARACTER-SET>,CHS)
	ORNDSP(SETN32,<CIRCUIT>,CIR)
	ORNDSP(SETN33,<DATA>,DAT)
	ORNDSP(SETN34,<LOGON-MODE>,LOM)
	$ETAB

SETN31:	$CTEXT(CONFRM,<IBM application>)

SETN32:	$CTEXT(CONFRM,<circuit-ID>)

SETN33:	$CTEXT(CONFRM,<IBM logon data>)

SETN34:	$CTEXT(CONFRM,<IBM logon mode>)

SETN35:$IFILE(CONFRM,<Translation table file>)

SETN40:	$NUMBER(CONFRM,^D10,<time in jiffies>,<$ACTION(CHKVAL)>)

SETN50:	$KEY(CONFRM,SETN55,<$DEFAULT(<ON>)>)

SETN55:	$STAB
	ORNKEY(<OFF>,OFF)
	ORNKEY(<ON>,ON)
	$ETAB

SETN60:	$NUMBER(CONFRM,^D10,<records per message for 2780>,<$ACTION(CHKVAL)>)

SETN80:	$KEY(CONFRM,SETN85)

SETN85:	$STAB
	ORNKEY(<PRIMARY>,PRI)
	ORNKEY(<SECONDARY>,SEC)
	$ETAB

SETN90:	$KEY(CONFRM,SETN55)
SETN95:	$NUMBER(CONFRM,^D10,<bytes per message size for the front end>)
>;END FTDN60
SUBTTL	SET SCHEDULER command tables 

SETSCH:	$KEYDSP(SETS10,<$DEFAULT(<BIAS-CONTROL>)>)

SETS10:	$STAB
	ORNDSP(SETS50,<BATCH-CLASS>,BAT)
	ORNDSP(SETS20,<BIAS-CONTROL>,BIA)
	ORNDSP(SETS40,<CLASS>,CLS)
	$ETAB
SETS20:	$NOISE(SETS30,<to>)

SETS30:	$NUMBER(CONFRM,^D10,<<decimal number, a small number to favor interactive processes, larger number for compute-bound>>,<$ACTION(CHKVAL)>)

SETS40:	$NOISE(SETS42,<number>)

SETS42:	$NUMBER(SETS44,^D10,<scheduler class number>,<$ACTION(CHKVAL)>)

SETS44:	$NOISE(SETS46,<to percent>)

SETS46:	$NUMBER(CONFRM,^D10,<percent for this scheduler class (0-99)>,<$ACTION(CHKPER)>)

SETS50:	$KEY(CONFRM,SETS52,<$ALTERNATE(SETS54)>)

SETS52:	$STAB
	ORNKEY(<BACKGROUND>,BCK)
	ORNKEY(<NONE>,NON)
	$ETAB

SETS54:	$NUMBER(CONFRM,^D10,<scheduler class for batch>,<$ACTION(CHKVAL)>)


CHKPER:	SKIPL	T1,CR.RES(S2)	;CHECK THAT NUMBER
	CAILE	T1,^D100	;TOO LARGE
	SKIPA
	$RETT			;RETURN
	PUSHJ	P,FIXIT
	MOVEI	S2,[ASCIZ/scheduler percent out of range/]
	$RETF

SUBTTL	SET PORT command tables

SETP00:	$KEY(SETP20,SETP10,<$DEFAULT(<CI>)>)

SETP10:	$STAB
	ORNKEY(<CI>,CI)
	ORNKEY(<NI>,NI)
	$ETAB

SETP20:	$KEY(CONFRM,SETP30)

SETP30:	$STAB
	ORNKEY(<AVAILABLE>,AVA)
	ORNKEY(<UNAVAILABLE>,UAV)
	$ETAB

SUBTTL	SHOW command tables

SHWFDB:	$KEYDSP(SHW010)

SHW010:	$STAB
CLUSTER<ORNDSP(SHWC00,<CLUSTER-GALAXY-LINK-STATUS>,CGL)> 
	ORNDSP(SHW500,CONFIGURATION,CFG)
	ORNDSP(SHW110,<CONTROL-FILE>,CTL)
	ORNDSP(SHW020,MESSAGES,MSG)
	ORNDSP(SHW030,OPERATORS,OPR)
	ORNDSP(SHW210,PARAMETERS,PRM)
	ORNDSP(SHW400,QUEUES,QUE)
CLUSTER<
	ORNDSP(SHW350,<ROUTE-TABLE>,RTE)	
	ORNDSP(SHW350,SCHEDULER,SCH)		
> 
SINGLE<
	ORNDSP(CONFRM,<ROUTE-TABLE>,RTE)	
	ORNDSP(CONFRM,SCHEDULER,SCH)		
> 

	ORNDSP(STS000,STATUS,STS)
	ORNDSP(SHW060,TIME,DAY)	;DAYTIME CHANGES TO TIME
	$ETAB

SHWC00:	$SWITCH(SHWC15,SHWC10,<$ALTER(SHWC20)>) 
SHWC10:	$STAB					
	  ORNSWI (<NODE:>,NOD)			
	$ETAB					
SHWC15:	$NODNM(SHWC20,<node name>,<$FLAGS(CM%PO!CM%NSF),$ACTION(CHKNOD)>)
SHWC20:	$CLUNOD(CONFRM)				

CLUSTER<
SHW020:	$NUMBER(SHW040,^D10,<message number>,<$ALTER(SHW030),$ACTION(CHKVAL)>)
> 

SINGLE<
SHW020:	$NUMBER(CONFRM,^D10,<message number>,<$ALTER(SHW030),$ACTION(CHKVAL)>)
>

CLUSTER<
SHW030:	$NODE(SHW040)				
SHW040:	$CLUNOD(CONFRM)				
> 

SINGLE<
SHW030:	$NODE(CONFRM)				
> 

SHW060:	$CRLF(<$ACTION(SHWDAY##)>)

SHW110:	$NOISE	(SHW120,<for>)
SHW120:	$KEY (SHW140,SHW130,<$DEFAULT(<BATCH-STREAM>)>)

SHW130:	$STAB
	ORNKEY(<BATCH-STREAM>,BAT)
	$ETAB

SHW140:	$NOISE	(SHW145,<stream number>)
SHW145:	$NUMBER	(SHW150,^D10,<stream number>,$ACTION(CHKVAL))

SHW150:	$SWITCHES(,SHW160,<$ALTER(CONFRM)>)
SHW160:	$STAB
	ORNSDP	(SHW170,<LINES:>,LNS)
	$ETAB
SHW170:	$NUMBER	(CONFRM,^D10,<number of lines>,$ACTION(CHKVAL))

SHW210:	$KEYDSP(SHW220,<$ALTER(SHW320)>)

SHW220:	$STAB
	ORNDSP	(SHW230,<BATCH-STREAM>,BAT)
	ORNDSP	(SHW230,<CARD-PUNCH>,CDP)
IFN FTFTS,<
	ORNDSP	(SHW230,<FAL-STREAM>,FAL)
	ORNDSP	(SHW230,<FTS-STREAM>,FTS)
> ;End FTFTS conditional
	ORNDSP	(SHWNOD,<NETWORK-NODE>,NOD)
	ORNDSP	(SHW230,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP	(SHW230,<PLOTTER>,PLT)
	ORNDSP	(SHW272,<PRINTER>,LPT)			
	$ETAB


SHW230:	$SWITCH(SHW260,SHW250,<$ALTERNATE(SHW270)>)

SHW250:	$STAB
	ORNSWI(<NODE:>,NOD)
	$ETAB

CLUSTER<
SHW260:	$NODNM(SHW350,<node name>,<$FLAGS(CM%PO!CM%NSF)>)	

SHW270:	$RANGE(SHW280,<number or range (n:m)(/NODE:)>,<$ALTERNATE(SHW350)>)
> 

SINGLE<
SHW260:	$NODNM(CONFRM,<node name>,<$FLAGS(CM%PO!CM%NSF)>)	

SHW270:	$RANGE(SHW280,<number or range (n:m)(/NODE:)>,<$ALTERNATE(CONFRM)>)
> 

;PRINTERS

CLUSTER<
SHW272:	$KEYDSP	(SHW273,<$ALTERNATIVE(SHW350)>) 		
>

SINGLE<
SHW272:	$KEYDSP (SHW273,<$ALTERNATIVE(CONFRM)>)			
> 

SHW273:	$STAB
CLUSTER<  ORNDSP (SHW274,CLUSTER,CLU)> 
	  ORNDSP (SHW275,DQS,DQS)
	  ORNDSP (SHW276,LAT,LAT)
	  ORNDSP (SHW277,LOCAL,LOC)	
	$ETAB

CLUSTER<
SHW274:	$CLUSPL (SHW350,SHW350)		
SHW275:	$DQSSPL	(SHW350,SHW350)		
SHW276:	$LATSPL	(SHW350,SHW350)		
SHW277:	$RANGE(SHW350,<number or range (n:m)>,<$ALTERNATE(CONFRM)>) 

SHW280:	$NODE(SHW350)			

SHW320:	$SWITCH(SHW340,SHW330,<$ALTERNATE(SHW350)>)		    

SHW330:	$STAB
	ORNSWI(<NODE:>,NOD)
	$ETAB

SHW340:	$NODNM(SHW350,<node name>,<$FLAGS(CM%PO!CM%NSF)>)	    
SHW350:	$CLUNOD	(CONFRM)					    
> 

SINGLE<
SHW275:	$DQSSPL	(CONFRM,CONFRM)					    
SHW276:	$LATSPL	(CONFRM,CONFRM)					    
SHW277:	$RANGE(CONFRM,<number or range (n:m)>,<$ALTERNATE(CONFRM)>) 

SHW280:	$NODE(CONFRM)						    

SHW320:	$SWITCH(SHW340,SHW330,<$ALTERNATE(CONFRM)>)		    

SHW330:	$STAB							    
	ORNSWI(<NODE:>,NOD)					    
	$ETAB							    

SHW340:	$NODNM(CONFRM,<node name>,<$FLAGS(CM%PO!CM%NSF)>)	    
> 

;  Continued on next page

;Continued from previous page

;  SHOW CONFIGURATION command

SHW500:	$NOISE(SHW510,<of>)

SHW510:	$KEYDSP(SHW520)

SHW520:	$STAB
	ORNDSP(SHW530,<DISK-DRIVE>,DSK)
	$ETAB

CLUSTER<
SHW530:	$SWITCH(SHW550,SHW540,<$ALTERNATE(SHW550)>)	
> 

SINGLE<
SHW530:	$SWITCH(CONFRM,SHW540,<$ALTERNATE(CONFRM)>)	
> 

SHW540:	$STAB
	ORNSWI(ALL,ALL)
	ORNSWI(FREE,AVA)
	ORNSWI(MOUNTED,MNT)
	$ETAB

CLUSTER<
SHW550:	$CLUNOD	(CONFRM)				
> 

;  Continued on next page
;Continued from previous page

;  SHOW QUEUE command

SHW400:	$KEYDSP(SHW420,<$DEFAULT(ALL),$ALTER(SHW430)>);NODE OR CONFIRM

SHW420:	$STAB
	ORNDSP	(SHW430,<ALL-JOBS>,ALL)
	ORNDSP	(SHW430,<BATCH-JOBS>,BAT)
	ORNDSP	(SHW430,<CARD-PUNCH-JOBS>,CDP)
IFN FTFTS,<
	ORNDSP	(SHW430,<FTS-REQUEST>,FTS)
> ;End FTFTS conditional
	ORNDSP	(SHW470,<MOUNT-REQUESTS>,MNT)
	ORNDSP	(SHW430,<PAPER-TAPE-PUNCH-JOBS>,PTP)
	ORNDSP	(SHW430,<PLOTTER-JOBS>,PLT)
	ORNDSP	(SHW430,<PRINTER-JOBS>,LPT)
	ORNDSP	(SHW470,<RETRIEVAL-REQUESTS>,RET)
	$ETAB

CLUSTER<
SHW430:	$SWITCH	(,SHW440,<$ALTER(SHW600),$ACTION(SHRSWT)>) ;Switch or confirm
> 

SINGLE<
SHW430:	$SWITCH	(,SHW440,<$ALTER(CONFRM),$ACTION(SHRSWT)>) ;Switch or confirm
>

SHW440:	$STAB
	ORNSDP	(NEXT,<ALL>,ALL)
	ORNSDP	(SHW450,<NODE:>,NOD)
	ORNSDP	(NEXT,<SHORT>,SHT)
	ORNSDP	(SHW460,<USER:>,USR)
	$ETAB

SHW450:	$NODNM	(NEXT,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

SHW460:	$USER	(NEXT)

SHW470:	$SWITCH	(,SHW480,<$ALTER(SHW600),$ACTION(SHRSWT)>) ;Switch or confirm

SHW480:	$STAB					;  But no node allowed!
	ORNSDP	(NEXT,<ALL>,ALL)
	ORNSDP	(NEXT,<SHORT>,SHT)
	ORNSDP	(SHW490,<USER:>,USR)
	$ETAB

SHW490:	$USER	(NEXT)

SHW600:	$CLUNOD	(CONFRM)			

SUBTTL	SHOW STATUS command tables

STS000:	$KEYDSP(STS010,<$ALTER(STS100)>)

STS010:	$STAB
	ORNDSP	(STS020,<BATCH-STREAM>,BAT)
	ORNDSP	(STS020,<CARD-PUNCH>,CDP)
	ORNDSP	(STS190,<DISK-DRIVE>,DSK)
IFN FTFTS,<
	ORNDSP	(STS020,<FAL-STEAM>,FAL)
	ORNDSP	(STS020,<FTS-STREAM>,FTS)
> ;End FTFTS conditional
	ORNDSP	(SHWNOD,<NETWORK-NODE>,NOD)
	ORNDSP	(STS020,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP	(STS020,<PLOTTER>,PLT)
	ORNDSP	(STS121,<PRINTER>,LPT)			
	ORNDSP	(STS020,<READER>,RDR)
	ORNDSP	(STS250,<STRUCTURE>,STR)
	ORNDSP	(STS150,<TAPE-DRIVE>,TAP)		
	$ETAB

STS020:	$SWITCH(STS040,STS030,<$ALTERNATE(STS050)>)
STS030:	$STAB
	ORNSWI(<NODE:>,NOD)
	$ETAB

STS040:	$NODNM(STS130,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

STS050:	$RANGE(STS060,<number or range (n:m)(/NODE:)>,<$ALTERNATE(STS130)>)


STS060:	$NODE(STS130)

STS100:	$SWITCH(STS120,STS110,<$ALTERNATE(STS130)>)

STS110:	$STAB
	ORNSWI(<NODE:>,NOD)
	$ETAB

STS120:	$NODNM(STS130,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

STS121:	$KEYDSP	(STS122,<$ALTERNATE(<STS127>)>)
STS122:	$STAB
CLUSTER<  ORNDSP(STS123,CLUSTER,CLU)>  
	  ORNDSP(STS124,DQS,DQS)
	  ORNDSP(STS125,LAT,LAT)
	  ORNDSP(STS126,LOCAL,LOC)     
	$ETAB

CLUSTER<
STS123:	$CLUSPL	(STS130,STS130)		
> 
STS124:	$DQSSPL	(STS130,STS130)		
STS125:	$LATSPL	(STS130,STS130)		
STS126:	$RANGE(STS130,<number or range (n:m)>,<$ALTERNATE(STS130)>) 

STS127:	$SWITCH(STS129,STS128,<$ALTERNATE(STS130)>)	
STS128:	$STAB						
	ORNSWI(<NODE:>,NOD)				
	$ETAB						

STS129:	$NODNM(STS130,<node or server name>,<$FLAGS(CM%PO!CM%NSF)>) 

CLUSTER<
STS130:	$SWITCH(STS300,STS140,<$ALTERNATE(STS300)>)	
> 

SINGLE<
STS130:	$SWITCH(CONFRM,STS140,<$ALTERNATE(CONFRM)>)	
> 


STS140:	$STAB
	ORNSWI(SHORT,SHT)
	$ETAB

STS150:	$DEV(STS170,<$HELP(<tape drive name>),$ALTERNATE(STS170)>)

CLUSTER<
STS170:	$SWITCH(STS300,STS180,<$ALTERNATE(STS300)>)	
> 

SINGLE<
STS170:	$SWITCH(CONFRM,STS180,<$ALTERNATE(CONFRM)>)	
> 

STS180:	$STAB
	ORNSWI(ALL,ALL)
	ORNSWI(CHARACTERISTICS,CHR)
	ORNSWI(FREE,FRE)
	$ETAB

CLUSTER<
STS190:	$SWITCH(STS300,STS200,<$ALTERNATE(STS300)>)	
> 

SINGLE<
STS190:	$SWITCH(CONFRM,STS200,<$ALTERNATE(CONFRM)>)	
> 


STS200:	$STAB
	ORNSWI(ALL,ALL)
	ORNSWI(FREE,AVA)
	ORNSWI(MOUNTED,MNT)
	$ETAB

CLUSTER<
STS250:	$SWITCH(STS300,STS270,<$ALTERNATE(STS280)>)	
> 

SINGLE<
STS250:	$SWITCH(CONFRM,STS270,<$ALTERNATE(STS280)>)	
> 

STS270:	$STAB
	ORNSWI(ALL,ALL)
	ORNSWI(MOUNTED,MNT)
	ORNSWI(UNMOUNTED,AVA)
	$ETAB

CLUSTER <
STS280:	$DEV(STS300,<$HELP(<structure name>),$ALTERNATE(STS300),$FLAGS(CM%PO)>)
STS300:	$CLUNOD	(CONFRM)				
> 

SINGLE <
STS280:	$DEV(CONFRM,<$HELP(<structure name>),$ALTERNATE(CONFRM),$FLAGS(CM%PO)>)
> 


SUBTTL	SHWNOD	SHOW STATUS/PARAMETERS FOR NODE

CLUSTER<
SHWNOD:	$NODNM(SHWN10,<node name>,<$FLAGS(CM%PO!CM%NSF),$ALTERNATIVE(SHWN10)>)
SHWN10:	$CLUNOD	(CONFRM)				 
> 

SINGLE<
SHWNOD:	$CRLF	(<$ALTERNATE(SHWN01)>)			  
SHWN01:	$NODNM(CONFRM,<node name>,<$FLAGS(CM%PO!CM%NSF)>) 
> 

SUBTTL	START command tables

STAFDB:	$NOISE (STAF01,<object>)

STAF01:	$KEYDSP(STAF02)

STAF02:	$STAB
	ORNDSP(STAF03,BATCH-STREAM,BAT)
	ORNDSP(STAF04,<CARD-PUNCH>,CDP)
IFN FTFTS,<
	ORNDSP(STAF03,<FAL-STREAM>,FAL)
	ORNDSP(STAF03,<FTS-STREAM>,FTS)
> ;End FTFTS conditional
	ORNDSP(SHD030,<NODE>,NOD)
	ORNDSP(STAF04,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP(STAF04,<PLOTTER>,PLT)
	ORNDSP(STAF11,PRINTER,LPT)
	ORNDSP(STAF04,READER,RDR)
	$ETAB

STAF03:	$SRANGE(CONFRM)
SHD030:	$NODNM(CONFRM,<node name>,<$FLAGS(CM%PO!CM%NSF)>)
STAF04:	$URANGE	(CONFRM)

STAF11:	$NOISE	(STAF12,<unit number or remote printer type>)
STAF12:	$ORANGE	(STAF14,<number or range (n:m)>,<$ALTERNATE(<STAF17>)>) 
STAF14:	$SWITCH	(STAF26,STAF25,<$ALTERNATE(<CONFRM>)>)	

STAF25:	$STAB
	  ORNSWI	(<DEVICE:>,DEV)
	$ETAB
STAF26:	$DEV	(STAF27,<$HELP(<tape drive name or terminal line number>)>,<$ALTERNATE(<CONFRM>)>)

STAF27:	$SWITCH	(STAF29,STAF28,<$ALTERNATE(<CONFRM>)>)

STAF28:	$STAB
	  ORNSWI	(<TERMINAL-CHARACTERISTIC:>,TTC)	
	$ETAB

STAF29:	$FIELD	(CONFRM,<Terminal characteristic name>,<$ALTERNATE(<CONFRM>)>)

;REMOTE PRINTERS

STAF17:	$KEYDSP	(STAF18)
STAF18:	$STAB
CLUSTER<  ORNDSP (STAF19,CLUSTER,CLU)> 				
	  ORNDSP (STAF20,DQS,DQS)
	  ORNDSP (STAF21,LAT,LAT)
	$ETAB
CLUSTER<
STAF19:	$CLUSPL	(CONFRM)
> 
STAF20:	$DQSSPL	(CONFRM)
STAF21:	$LATSPL	(STAF22)					

STAF22: $SWITCH (STAF24,STAF23,<$ALTERNATE(<CONFRM>)>) 		
STAF23:	$STAB
	  ORNSWI	(<TERMINAL-CHARACTERISTIC:>,TTC)	
	$ETAB
STAF24:	$FIELD	(CONFRM,<Terminal characteristic>,<$ALTERNATE(<CONFRM>)>)

SUBTTL	STOP command tables

STPFDB:	$NOISE (STPF01,<object>)

STPF01:	$KEYDSP(STPF02)

STPF02:	$STAB
	ORNDSP(STPS01,BATCH-STREAM,BAT)
	ORNDSP(STPU01,<CARD-PUNCH>,CDP)
IFN FTFTS,<
	ORNDSP(STPU01,<FTS-STREAM>,FTS)
> ;End FTFTS conditional
	ORNDSP(STPU01,<PAPER-TAPE-PUNCH>,PTP)
	ORNDSP(STPU01,<PLOTTER>,PLT)
	ORNDSP(STP050,PRINTER,LPT)
	ORNDSP(STPU01,READER,RDR)
	$ETAB

STPS01:	$NOISE	(STPN01,<stream number>)

STPU01:	$NOISE	(STPN01,<unit number>)

STPN01:	$NUMBER	(STPN02,^D10,<number or range (n:m)(/NODE:)>,<$ACTION(STOBTH)>)
STPN02:	$TOKEN	(STPN03,<:>,<$HELP(<colon to specify a range>),$DEFAULT(IMMEDIATELY),$ALTERNATE(STPN04)>)
STPN03:	$NUMBER	(STPN04,^D10,,<$ACTION(STOHGH)>)
STPN04:	$SWITCH (STPN06,STPN05,<$ALTERNATE(STP070)>)
STPN05:	$STAB
	ORNSWI(NODE:,NOD)
	$ETAB
STPN06:	$NODNM	(STP070,<node name>,<$FLAGS(CM%PO!CM%NSF)>)

STP050:	$NOISE	(STP051,<unit number or remote printer type>)
STP051:	$NUMBER	(STP052,^D10,<number or range (n:m)>,<$ACTION(STOBTH),$ALTERNATE(STP057)>)
STP052:	$TOKEN	(STP053,<:>,<$HELP(<colon to specify a range>),$DEFAULT(IMMEDIATELY),$ALTERNATE(STP070)>)
STP053:	$NUMBER	(STP070,^D10,,<$ACTION(STOHGH)>) 

;REMOTE PRINTERS

STP057:	$KEYDSP	(STP058)
STP058:	$STAB
CLUSTER<  ORNDSP (STP059,CLUSTER,CLU)>	
	  ORNDSP (STP060,DQS,DQS)
	  ORNDSP (STP061,LAT,LAT)
	$ETAB

CLUSTER<
STP059:	$CLUSPL	(STP070)
> 

STP060:	$DQSSPL	(STP070)
STP061:	$LATSPL	(STP070)

STP070:	$KEYDSP	(STP080,<$DEFAULT(<IMMEDIATELY>),$ALTERNATE(CONFRM)>)

STP080:	$STAB
	ORNDSP(STP090,<AFTER>,AFT)
	ORNDSP(CONFRM,<IMMEDIATELY>,IMM)
	$ETAB

STP090:	$KEY(CONFRM,STP100)

STP100:	$STAB
	ORNKEY(<CURRENT-REQUEST>,ACR)
	ORNKEY(<EVERY-REQUEST>,AER)
	$ETAB

SUBTTL	SUPPRESS command tables

SUPFDB:	$NOISE (SUP001,<carriage control on>)

SUP001:	$KEY (SUP010,SUP005,<$DEFAULT(<PRINTER>)>)


SUP005:	$STAB
	ORNKEY (<PRINTER>,LPT)
	$ETAB

SUP010:	$NOISE	(SUP015,<unit number or remote printer type>)	
SUP015:	$NUMBER	(SUP040,^D10,<unit number>,<$ACTION(CHKVAL),$ALTERNATE(SUP025)>)
SUP025:	$KEYDSP	(SUP030)					
SUP030:	$STAB							
	  ORNDSP (SUP035,LAT,LAT)				
	$ETAB							
SUP035:	$LATSPL	(SUP040)					

SUP040:	$SWITCH(CONFRM,SUP045,<$DEFAULT(</JOB>),$ALTER(CONFRM)>)

SUP045:	$STAB							
	ORNSWI(FILE,FIL)
	ORNSWI(JOB,JOB)
	ORNSWI(STOP,STP)
	$ETAB

SUBTTL	SWITCH	command tables 

SWIFDB:	$NOISE(SWI010,<request number>)

SWI010:	$NUMBER(SWI020,^D10,<request number of the mount request to switch>)

SWI020:	$NOISE(SWI030,<to new volume>)

SWI030:	$QUOTE(SWI050,<volume-id in quotes if has non-alphanumeric characters>,<$ALTERNATE(SWI040)>)

SWI040:	$FIELD(SWI050,<volume-id without quotes>)

SWI050:	$NOISE(SWI060,<on drive>)

SWI060:	$DEV(CONFRM,<$HELP(<tape drive to switch request to>),$ALTERNATE(CONFRM)>)

SUBTTL UNDEFINE command tables

UNDFDB:	$KEY (UND020,UND010,<$DEFAULT(<STRUCTURE>)>)

UND010:	$STAB
	ORNKEY (STRUCTURE,STR)
	$ETAB

UND020:	$DEV (CONFRM,<$HELP(<structure name>),$FLAGS(CM%PO)>)

	END


